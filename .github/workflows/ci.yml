name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

env:
  BUILD_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy cppcheck

    - name: Check code formatting
      run: |
        find src include -name "*.cpp" -o -name "*.h" | xargs clang-format -style=file -dry-run -Werror

    - name: Run static analysis
      run: |
        # CPPCheck
        cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/ include/
        
        # Clang-tidy (if we had a compile_commands.json)
        # clang-tidy src/*.cpp -- -I include/

  build-and-test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        build_type: [Release, Debug]
        compiler: [gcc, clang]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          qtbase5-dev \
          qtbase5-dev-tools \
          libqt5widgets5 \
          libqt5core5a \
          libqt5gui5 \
          libqt5network5 \
          libssl-dev \
          libudev-dev \
          libx11-dev \
          libxfixes-dev \
          pkg-config \
          valgrind \
          gcovr

    - name: Set up compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV  
          echo "CXX=g++" >> $GITHUB_ENV
        fi

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -G Ninja

    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel

    - name: Run unit tests
      if: matrix.build_type == 'Debug'
      run: |
        cd build
        # Add when we have tests
        # ctest --build-config ${{ matrix.build_type }} --parallel --verbose

    - name: Memory leak check
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc' && matrix.os == 'ubuntu-22.04'
      run: |
        cd build
        # Run with valgrind when we have tests
        # valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./ExamGuard --help

    - name: Generate coverage report
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc' && matrix.os == 'ubuntu-22.04'
      run: |
        cd build
        # Add coverage flags in CMakeLists.txt for Debug builds
        # gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml .

    - name: Upload coverage to Codecov
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc' && matrix.os == 'ubuntu-22.04'
      uses: codecov/codecov-action@v4
      with:
        file: build/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          qtbase5-dev \
          qtbase5-dev-tools \
          libssl-dev \
          libudev-dev \
          libx11-dev \
          libxfixes-dev \
          pkg-config

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4

  build-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install documentation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz pandoc

    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        doxygen Doxyfile || echo "Doxyfile not found, skipping API docs"

    - name: Validate README
      run: |
        # Check if README has required sections
        grep -q "## Installation" README.md
        grep -q "## Usage" README.md
        grep -q "## Building" README.md
        
        # Check for broken links (basic check)
        grep -o 'http[s]*://[^)]*' README.md | while read url; do
          echo "Checking: $url"
          curl -f -s --head "$url" > /dev/null || echo "Warning: $url might be broken"
        done || true

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/